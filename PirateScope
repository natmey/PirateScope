#!/usr/bin/python3

# PirateScope - Oscilloscope script for Dangerous Prototypes' Bus Pirate
# Copyright (C) 2010 Tim Vaughan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import wx
from wx.lib import plot
from wx.lib.wordwrap import wordwrap

import serial, time, sys, os
from threading import Thread

from numpy import *
from numpy.fft import rfft


# Bus Pirate Oscilloscope class:

class BPO(Thread):

	SYNC_NONE = 0
	SYNC_RISE = 1
	SYNC_FALL = 2

	MODE_CONTINUOUS = 0
	MODE_ONESHOT = 1

	minV = 0.
	maxV = 6.

	BaseRate = 5720 # Hz

	wantAbort = False

	def __init__(self, port, win, rate, mode, sync, trigV, phaseOffset, debug=False):

		# Perform default thread initialization:
		Thread.__init__(self)

		# Set oscilloscope options
		self.mode = mode
		self.sync = sync
		self.trigV = trigV
		self.phaseOffset = phaseOffset
		self.rate = rate
		self.win = win

		# Initialize data buffer:
		self.data = -10*ones(win)

		self.debug = debug
		if not debug:
			# Open BP serial device:
			self.serdev = serial.Serial(port=port, baudrate=115200)

			# Enter binary scripting mode:
			self.serdev.write(str.encode('\n\n'))
			time.sleep(0.1)
			self.serdev.write(''.join(['\x00' for i in range(20)]).encode())
			time.sleep(0.1)

			# Start continuous voltage measurement mode:
			self.serdev.flushInput()
			self.serdev.write(str.encode('\x15'))
			time.sleep(0.1)

		self.start()


	# Thread execution method:
	def run(self):

		if self.debug:

			# Artificial waveforms for debugging FFT code

			bpf = self.BaseRate/self.rate
			t = linspace(0,float(self.win)/bpf, self.win)

			# Sine wave frequency test:
			self.data = 3.*(1.+sin(2*pi*self.BaseRate/10.*t))

			# Square wave frequency test:
			#self.data = 5.*(((t/(27.0/self.BaseRate))%1.0)>0.5)

			return

		if self.mode == self.MODE_CONTINUOUS:

			while True:

				if len(self.data) != self.win:
					self.data = -10*ones(self.win)

				self.sample()
				if self.wantAbort:
					self.shutdown()
					return

		elif self.mode == self.MODE_ONESHOT:
			self.sample()
			self.shutdown()
			return


	# Acquire single voltage measurement:
	def getV(self):

		# Sampling frequency divider
		for i in range(self.rate-1):
			resp = self.serdev.read(2)

		resp = self.serdev.read(2)
		return (resp[0]*256 + resp[1])*6.6/1024


	# Check whether trigger condition has been met:
	def trig_check(self, thisV, lastV):

		if self.sync == self.SYNC_RISE:
			return (thisV >= self.trigV) and (lastV < self.trigV)
		else:
			return (thisV <= self.trigV) and (lastV > self.trigV)

	# Provide correct initialisation for lastV:
	def trig_init(self):

		if self.sync == self.SYNC_RISE:
			return self.maxV
		else:
			return self.minV


	# Acquire full window of data:
	def sample(self):

		if self.sync != self.SYNC_NONE:

			phaseOffsetP = max(self.phaseOffset*self.win/100,0)
			phaseOffsetN = -min(self.phaseOffset*self.win/100,0)
			vbuffer = zeros(int(phaseOffsetN))

			# Pad out buffer to account for negative phase offset:

			for i in range(int(phaseOffsetN)):
				thisV = self.getV()
				vbuffer = roll(vbuffer,1)
				vbuffer[0] = thisV

			# Wait for trigger condition:

			lastV = self.trig_init()

			while True:

				thisV = self.getV()
				if phaseOffsetN:
					vbuffer = roll(vbuffer,1)
					vbuffer[0] = thisV

				if self.trig_check(thisV, lastV) or self.sync == self.SYNC_NONE:
						break
				lastV = thisV

				if self.wantAbort:
					return

			# Adjust to account for positive phase offset:

			for i in range(phaseOffsetP):
				self.getV()

				if self.wantAbort:
					return

			# Add negative-offset data:

			self.data[0:phaseOffsetN] = vbuffer[phaseOffsetN-1::-1]

			# Acquire data to fill remainder of buffer:

			for i in range(phaseOffsetN,len(self.data)):
				self.data[i] = self.getV()

				if self.wantAbort:
					return
		else:

			# Acquire data:

			for i in range(len(self.data)):
				self.data[i] = self.getV()

				if self.wantAbort:
					return


	# Ask thread to terminate:
	def abort(self):
		self.wantAbort = True

	# Shut down Bus Pirate:
	def shutdown(self):

		# Cease ADC input:

		self.serdev.write(str.encode(' '))
		time.sleep(0.1)
		self.serdev.flushInput()

		# Reset to return to BP ascii mode:

		self.serdev.write(str.encode('\x0f'))
		time.sleep(0.1)
		self.serdev.flushInput()
		self.serdev.close()


	# Oscilloscope adjustment methods:

	def SetRate(self, rate):
		self.rate = rate

	def SetWin(self, win):
		self.win = win

	def SetSync(self, sync):
		self.sync = sync

	def SetTrig(self, trig):
		self.trigV = trig

	def SetPhaseOffset(self, offset):
		self.phaseOffset = offset


# Main application window class:

class MainWindow(wx.Frame):

	# Property to hold BPO instance:
	bpo = None

	def __init__(self, parent, title):

		# Call standard frame constructor:
		wx.Frame.__init__(self, parent, title=title, id=wx.ID_ANY, size=(640,480))

		# Add status bar:
		self.CreateStatusBar()

		# Set up Menus:
		self.MenuSetup()

		# Main panel:
		self.panel = wx.Panel(self)

		# Set up plot window:
		self.plotpanel = wx.Panel(self.panel)
		self.plotpanel.SetBackgroundColour('white')
		self.plot = plot.PlotCanvas(self.plotpanel)
		#self.plot.SetGridColour('grey')
		self.plot.enableGrid = True

		self.TrigLevSlider = wx.Slider(self.plotpanel, wx.ID_ANY,
				50.*(BPO.maxV-BPO.minV), 100.*BPO.minV, 100.*BPO.maxV,
				style = wx.SL_VERTICAL | wx.SL_INVERSE)

		# Plot window panel sizers:
		self.plotsizer = wx.BoxSizer(wx.HORIZONTAL)
		self.plotsizer.Add(self.plot, 1, wx.EXPAND)
		self.plotsizer.Add(self.TrigLevSlider, 0, wx.EXPAND | wx.BOTTOM, 20)
		self.plotpanel.SetSizer(self.plotsizer)

		# Set up oscilloscope controls:
		self.contpanel = wx.Panel(self.panel, style=wx.BORDER_SUNKEN)
		self.SampleButton = wx.ToggleButton(self.contpanel, wx.ID_ANY, 'SAMPLE')
		self.SampleButton.SetBackgroundColour('green')

		self.SamplingBox = wx.StaticBox(self.contpanel, wx.ID_ANY, 'Sampling')
		self.RB_continuous = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Continuous', style=wx.RB_GROUP)
		self.RB_oneshot = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Single shot')
		self.FFTCheckBox = wx.CheckBox(self.contpanel, wx.ID_ANY, 'Spectrum')
		self.RateChoiceText = wx.StaticText(self.contpanel, wx.ID_ANY, 'Hz')
		self.RateChoice = wx.Choice(self.contpanel, wx.ID_ANY,
				choices = [str(int(i)) for i in BPO.BaseRate/arange(1,11)])
		self.RateChoice.SetSelection(0)

		self.WinSpinCtrlText = wx.StaticText(self.contpanel, wx.ID_ANY, 'Samples/win:')
		self.WinSpinCtrl = wx.SpinCtrl(self.contpanel, wx.ID_ANY,
				initial=100, min=100, max=1000)

		self.TriggeringBox = wx.StaticBox(self.contpanel, wx.ID_ANY, 'Triggering')
		self.RB_trigoff = wx.RadioButton(self.contpanel, wx.ID_ANY, 'No sync', style=wx.RB_GROUP)
		self.RB_trigrise = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Rising edge')
		self.RB_trigfall = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Falling edge')
		self.PhaseSpinCtrlText = wx.StaticText(self.contpanel, wx.ID_ANY, 'Offset (%win):')
		self.PhaseSpinCtrl = wx.SpinCtrl(self.contpanel, wx.ID_ANY,
				initial=0, min=-100, max=100)


		# Oscilloscope controls panel sizers:
		self.contsizer = wx.BoxSizer(wx.HORIZONTAL)
		self.contsizer.Add(self.SampleButton, 0, wx.EXPAND | wx.ALL, 20)

		self.SamplingBoxSizer = wx.StaticBoxSizer(self.SamplingBox, wx.HORIZONTAL)
		self.SamplingBoxSizer2 = wx.BoxSizer(wx.VERTICAL)
		self.SamplingBoxSizer2.Add(self.RB_continuous, 1)
		self.SamplingBoxSizer2.Add(self.RB_oneshot, 1)
		self.SamplingBoxSizer2.Add(self.FFTCheckBox, 1)
		self.SamplingBoxSizer.Add(self.SamplingBoxSizer2, 1, wx.EXPAND)
		self.SamplingBoxSizer3 = wx.BoxSizer(wx.VERTICAL)
		self.SamplingBoxSizer4 = wx.BoxSizer(wx.HORIZONTAL)
		self.SamplingBoxSizer4.Add(self.RateChoice,1)
		self.SamplingBoxSizer4.Add(self.RateChoiceText,0)
		self.SamplingBoxSizer3.Add(self.SamplingBoxSizer4)
		self.SamplingBoxSizer3.Add(self.WinSpinCtrlText)
		self.SamplingBoxSizer3.Add(self.WinSpinCtrl)
		self.SamplingBoxSizer.Add(self.SamplingBoxSizer3, 0, wx.EXPAND)
		self.contsizer.Add(self.SamplingBoxSizer, 1, wx.EXPAND | wx.RIGHT, 20)

		self.TriggeringBoxSizer = wx.StaticBoxSizer(self.TriggeringBox, wx.HORIZONTAL)
		self.TriggeringBoxSizer2 = wx.BoxSizer(wx.VERTICAL)
		self.TriggeringBoxSizer2.Add(self.RB_trigoff,1)
		self.TriggeringBoxSizer2.Add(self.RB_trigrise,1)
		self.TriggeringBoxSizer2.Add(self.RB_trigfall,1)
		self.TriggeringBoxSizer.Add(self.TriggeringBoxSizer2, 1, wx.EXPAND)
		self.TriggeringBoxSizer3 = wx.BoxSizer(wx.VERTICAL)
		self.TriggeringBoxSizer3.Add(self.PhaseSpinCtrlText)
		self.TriggeringBoxSizer3.Add(self.PhaseSpinCtrl)
		self.TriggeringBoxSizer.Add(self.TriggeringBoxSizer3, 0, wx.EXPAND)
		self.contsizer.Add(self.TriggeringBoxSizer, 1, wx.EXPAND)

		self.contpanel.SetSizer(self.contsizer)

		# Main panel sizers:
		self.sizer = wx.BoxSizer(wx.VERTICAL)
		self.sizer.Add(self.plotpanel, 1, wx.EXPAND)
		self.sizer.Add(self.contpanel, 0, wx.EXPAND)
		self.panel.SetSizer(self.sizer)

		# Bind event handlers:
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnSampleButton, self.SampleButton)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnSampContinuous, self.RB_continuous)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnSampOneShot, self.RB_oneshot)
		self.Bind(wx.EVT_CHECKBOX, self.OnFFTCheckBox, self.FFTCheckBox)
		self.Bind(wx.EVT_CHOICE, self.OnRateAdjust, self.RateChoice)
		self.Bind(wx.EVT_SPINCTRL, self.OnWinAdjust, self.WinSpinCtrl)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigRise, self.RB_trigrise)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigFall, self.RB_trigfall)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigOff, self.RB_trigoff)
		self.Bind(wx.EVT_SLIDER, self.OnTrigLevAdjust, self.TrigLevSlider)
		self.Bind(wx.EVT_SPINCTRL, self.OnPhaseAdjust, self.PhaseSpinCtrl)

		# Set up plot updating timer:
		self.timer = wx.Timer(self)
		self.Bind(wx.EVT_TIMER, self.OnUpdate, self.timer)

		# Set up oscilloscope defaults:
		self.OscilloscopeDefaultSetup()

		# Draw empty plot:
		self.UpdatePlot()

		self.Show(True)


	# Menu initialization subroutine:
	def MenuSetup(self):

		# Create menu bar:
		menuBar = wx.MenuBar()

		# File menu:
		filemenu = wx.Menu()

		menuItemFileSaveSample = filemenu.Append(wx.ID_ANY, "&Save Sample", "Save sample to file")
		self.Bind(wx.EVT_MENU, self.OnFileSaveSample, menuItemFileSaveSample)

		menuItemFileSaveGraph = filemenu.Append(wx.ID_ANY, "Save &Graph", "Save graph to file")
		self.Bind(wx.EVT_MENU, self.OnFileSaveGraph, menuItemFileSaveGraph)

		filemenu.AppendSeparator()

		menuItemFileSetDevice = filemenu.Append(wx.ID_ANY, "Set Bus Pirate &Device",
				"Set Bus Pirate serial device.")
		self.Bind(wx.EVT_MENU, self.OnFileSetDevice, menuItemFileSetDevice)

		filemenu.AppendSeparator()

		menuItemFileExit = filemenu.Append(wx.ID_EXIT, "E&xit", "Terminate the program.")
		self.Bind(wx.EVT_MENU, self.OnFileExit, menuItemFileExit)

		menuBar.Append(filemenu, "&File")

		# View menu:
		viewmenu = wx.Menu()
		self.menuItemViewGrid = viewmenu.Append(wx.ID_ANY, '&Grid', 'Toggle grid',
				kind=wx.ITEM_CHECK)
		self.menuItemViewGrid.Check()
		self.Bind(wx.EVT_MENU, self.OnViewGrid, self.menuItemViewGrid)
		self.menuItemViewTrigLev = viewmenu.Append(wx.ID_ANY,
				'Trigger &Level', 'Toggle trigger level visibility',
				kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewTrigLev, self.menuItemViewTrigLev)
		self.menuItemViewTrigOrig = viewmenu.Append(wx.ID_ANY,
				'Trigger &Origin', 'Toggle trigger origin visibility',
				kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewTrigOrig, self.menuItemViewTrigOrig)
		viewmenu.AppendSeparator()
		self.menuItemViewAutoscale = viewmenu.Append(wx.ID_ANY, '&Automatic Axis Scaling',
				kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewAutoscale, self.menuItemViewAutoscale)

		menuBar.Append(viewmenu, '&View')

		# Help menu:
		helpmenu = wx.Menu()

		menuItemHelpAbout = helpmenu.Append(wx.ID_ABOUT, "&About", "Information about this program.")
		self.Bind(wx.EVT_MENU, self.OnHelpAbout, menuItemHelpAbout)

		menuBar.Append(helpmenu, "&Help")

		# Assign menubar to frame:
		self.SetMenuBar(menuBar)

	# Set default sampling parameters:
	def OscilloscopeDefaultSetup(self):
		self.port = '/dev/ttyUSB0'
		self.win = 100
		self.rate = 1
		self.mode = BPO.MODE_CONTINUOUS
		self.sync = BPO.SYNC_NONE
		self.trigV = 0.5*(BPO.maxV-BPO.minV)
		self.phaseOffset = 0

		self.sampdt = self.rate/float(BPO.BaseRate)
		self.winT = self.win*self.sampdt


	# Update or clear plot canvas:
	def UpdatePlot(self):

		if not self.FFTCheckBox.IsChecked():
			# Plot raw voltage data:

			# Default voltage range:
			plotrange = (-1,7)

			if self.bpo != None:
				vdata = self.bpo.data
				data = [(1000*i*self.sampdt,vdata[i]) for i in range(len(self.bpo.data))]
				plotdomain = (0,1000*self.winT)

				if self.menuItemViewAutoscale.IsChecked():
					vmax = max(vdata)
					if vmax>0.:
						plotrange = (0.,max(vdata))
			else:
				data = [(0,-10),(1000*self.winT,-10)]
				plotdomain = (0,1000*self.winT)

			plotlist = [plot.PolyLine(data, colour='blue', width=1)]

			# Plot trigger voltage level:
			if self.menuItemViewTrigLev.IsChecked():
				triglev_dat = [(0,self.trigV),(1000*self.winT,self.trigV)]
				plotlist.append(plot.PolyLine(triglev_dat, colour='red',
					style=wx.LONG_DASH, width=2))

			# Plot trigger origin time:
			if self.menuItemViewTrigOrig.IsChecked():
				trigorig_dat = [(-self.phaseOffset*10.*self.winT,-1),
						(-self.phaseOffset*10*self.winT,7)]
				plotlist.append(plot.PolyLine(trigorig_dat, colour='red',
					style=wx.LONG_DASH, width=2))

			gc = plot.PlotGraphics(plotlist, '', 'Time (ms)', 'Voltage')
		else:
			# Plot FFT of voltage data:

			if self.bpo != None:
				fftresult = abs(rfft(self.bpo.data))
				data = [(float(i)/len(self.bpo.data)/self.sampdt,fftresult[i]) for i in range(len(fftresult))]

				plotdomain = (0,data[-1][0])
				plotrange = (-0.05*max(fftresult),max(fftresult))
				if plotrange[1]==0.:
					plotrange = (-1,1)
					plotdomain = (0,(self.win/2-1)/(self.win*self.sampdt))

			else:
				data = [(0,-10),((self.win/2-1)/(self.win*self.sampdt),-10)]
				plotdomain = (0,(self.win/2-1)/(self.win*self.sampdt))
				plotrange = (0,1)

			plotlist = [plot.PolyLine(data, colour='purple', width=1)]
			gc = plot.PlotGraphics(plotlist, '', 'Frequency (Hz)', 'Amplitude')

		# Draw plot to canvas:
		self.plot.Draw(gc, xAxis=plotdomain, yAxis=plotrange)

	# View menu event handlers:
	def OnViewGrid(self, event):
		self.plot.enableGrid = self.menuItemViewGrid.IsChecked()

	def OnViewTrigLev(self, event):
		if not self.SampleButton.GetValue():
			self.UpdatePlot()

	def OnViewTrigOrig(self, event):
		if not self.SampleButton.GetValue():
			self.UpdatePlot()

	def OnViewAutoscale(self, event):
		if not self.SampleButton.GetValue():
			self.UpdatePlot()


	# Display about box:
	def OnHelpAbout(self, event):

		info = wx.AboutDialogInfo()

		info.Name = "PirateScope"
		info.Copyright = "(C) 2010 Tim Vaughan"
		info.License = wordwrap(
			"This program is free software: you can redistribute it and/or modify "
			"it under the terms of the GNU General Public License as published by "
			"the Free Software Foundation, either version 3 of the License, or "
			"(at your option) any later version."

			"\n\nThis program is distributed in the hope that it will be useful, "
			"but WITHOUT ANY WARRANTY; without even the implied warranty of "
			"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the "
			"GNU General Public License for more details."

			"\n\nYou should have received a copy of the GNU General Public License "
			"along with this program.  If not, see <http://www.gnu.org/licenses/>.",
			500, wx.ClientDC(self))

		info.Description = wordwrap(
			"A small utility which allows one to use the ADC input of a "
			"Bus Pirate as a slow, single-channel oscilloscope.  Triggering "
			"and spectrum analysis are supported.",
			350, wx.ClientDC(self))

		wx.AboutBox(info)

	# Set Bus Pirate serial device:
	def OnFileSetDevice(self, event):

		dlg = wx.TextEntryDialog(self,
				"Please enter full path of Bus Pirate serial device:",
				"Set Bus Pirate Device",
				self.port)

		if dlg.ShowModal() == wx.ID_OK:
			self.port = dlg.GetValue()

		dlg.Destroy()

	# Save sample to file:
	def OnFileSaveSample(self, event):

		if self.bpo != None:

			dlg = wx.FileDialog(self,
					message="Save sample as...",
					defaultDir=".",
					defaultFile="",
					wildcard="*.txt",
					style=wx.SAVE)

			if dlg.ShowModal() == wx.ID_OK:

				path = dlg.GetPath()

				try:
					outf = file(path, 'w')
					outf.write('t V\n')
					for i in range(len(self.bpo.data)):
						V = self.bpo.data[i]
						t = i*self.sampdt*1000.
						outf.write('%g %g\n' % (t, V))
					outf.close()
				except:
					msg = "Error writing data to file."
					errordlg = wx.MessageDialog(self, msg, "Error", wx.OK)
					errordlg.ShowModal()
					errordlg.Destroy()

			dlg.Destroy()

		else:
			msg = "No sampled data to write."
			errordlg = wx.MessageDialog(self, msg, "Error", wx.OK)
			errordlg.ShowModal()
			errordlg.Destroy()

	# Save image of graph to file:
	def OnFileSaveGraph(self, event):

		# Use built-in PyPlot image saving method:
		self.plot.SaveFile()

	# Quit:
	def OnFileExit(self, event):

		if self.SampleButton.GetValue():
			self.timer.Stop()
			self.bpo.abort()
			time.sleep(0.5)

		self.Close(True)

	# Timer event hanlder:
	def OnUpdate(self, event):

		self.UpdatePlot()

		if not self.bpo.isAlive():
			self.timer.Stop()

			# Turn button off and green:
			self.SampleButton.SetValue(False)
			self.SampleButton.SetBackgroundColour('green')

			# Display "SAMPLING"
			self.SampleButton.SetLabel('SAMPLING')

	# Initiate sampling:
	def OnSampleButton(self, event):

		if self.SampleButton.GetValue():

			# Fire up oscilloscope:
			try:
				self.bpo = BPO(self.port,
						self.win,
						self.rate,
						self.mode,
						self.sync,
						self.trigV,
						self.phaseOffset)
			except:
				msg = "Failed to open Bus Pirate port '" + self.port + "'.\nCheck USB connection."
				dlg = wx.MessageDialog(self, msg, "Error", wx.OK)
				dlg.ShowModal()
				dlg.Destroy()

				self.SampleButton.SetValue(False)
				return

			# Turn button red:
			self.SampleButton.SetBackgroundColour('red')

			# Display "STOP SAMPLING"
			self.SampleButton.SetLabel('    STOP\nSAMPLING')

			# Prevent switching mode while sampling:
			if self.mode == BPO.MODE_CONTINUOUS:
				self.RB_oneshot.Disable()
			else:
				self.RB_continuous.Disable()

			# Start plot timer (0.1s intervals):
			self.timer.Start(milliseconds=100)

		else:
			if self.bpo.isAlive():
				self.timer.Stop()
				self.bpo.abort()
				self.UpdatePlot()

				# Turn button green:
				self.SampleButton.SetBackgroundColour('green')

				# Display "SAMPLING"
				self.SampleButton.SetLabel('SAMPLING')

				# Ensure sampling mode radio buttons are enabled:
				self.RB_oneshot.Enable()
				self.RB_continuous.Enable()


	# Oscilloscope control event handlers:

	def OnSampContinuous(self, event):
		self.mode = BPO.MODE_CONTINUOUS

	def OnSampOneShot(self, event):
		self.mode = BPO.MODE_ONESHOT

	def OnFFTCheckBox(self, event):
		self.UpdatePlot()

	def OnTrigRise(self, event):
		self.sync = BPO.SYNC_RISE
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)

	def OnTrigFall(self, event):
		self.sync = BPO.SYNC_FALL
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)

	def OnTrigOff(self, event):
		self.sync = BPO.SYNC_NONE
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)

	def OnTrigLevAdjust(self, event):
		self.trigV = self.TrigLevSlider.GetValue()/100.
		if self.SampleButton.GetValue():
			self.bpo.SetTrig(self.trigV)
		elif self.menuItemViewTrigLev.IsChecked():
			self.UpdatePlot()

	def OnRateAdjust(self, event):
		self.rate = self.RateChoice.GetSelection()+1
		self.sampdt = self.rate/float(BPO.BaseRate)
		self.winT = self.win*self.sampdt
		if self.bpo != None and self.bpo.isAlive():
			self.bpo.SetRate(self.rate)
		else:
			self.UpdatePlot()

	def OnWinAdjust(self, event):
		self.win = self.WinSpinCtrl.GetValue()
		self.winT = self.win*self.sampdt
		if self.bpo != None and self.bpo.isAlive():
			self.bpo.SetWin(self.win)
		else:
			self.UpdatePlot()

	def OnPhaseAdjust(self, event):
		self.phaseOffset = self.PhaseSpinCtrl.GetValue()
		if self.bpo != None and self.bpo.isAlive():
			self.bpo.SetPhaseOffset(self.phaseOffset)
		elif self.menuItemViewTrigOrig.IsChecked():
			self.UpdatePlot()


# Main program loop:
if __name__ == '__main__':
	app = wx.App(False)
	frame = MainWindow(None, 'PirateScope')
	app.MainLoop()
